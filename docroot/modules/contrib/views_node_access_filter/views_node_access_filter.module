<?php

/**
 * @file
 * Module file.
 */

include_once __DIR__ . '/views_node_access_filter.access_records.inc';

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_views_data_alter().
 */
function views_node_access_filter_views_data_alter(array &$data) {
  $data['node_field_data']['editable'] = [
    'title' => t('Editable'),
    'help' => t('Only keep nodes for which the current user has edit access.'),
    'filter' => [
      'id' => 'views_node_access_filter_editable',
      'field' => 'nid',
      'label' => t('Editable'),
    ],
  ];
  $data['node_field_revision']['editable'] = [
    'title' => t('Editable'),
    'help' => t('Only keep revisions for which the current user has edit access.'),
    'filter' => [
      'id' => 'views_node_access_filter_editable',
      'field' => 'vid',
      'label' => t('Editable'),
    ],
  ];
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see node_query_node_access_alter()
 */
function views_node_access_filter_query_views_node_access_filter_editable_alter(AlterableInterface $query) {
  $query->addMetaData('op', 'update');
  $query->addTag('node_access');
}

/**
 * Implements hook_module_implements_alter().
 */
function views_node_access_filter_module_implements_alter(&$implementations, $hook) {
  // We need
  // views_node_access_filter_query_views_node_access_filter_editable_alter()
  // to be called before node_query_node_access_alter().
  if ($hook == 'query_alter') {
    if (isset($implementations['views_node_access_filter'])) {
      $implementation = $implementations['views_node_access_filter'];
      unset($implementations['views_node_access_filter']);
      $implementations = ['views_node_access_filter' => $implementation] + $implementations;
    }
  }
  // We need views_node_access_filter_node_access_records_alter() to be called
  // at the end so that it gets the records defined by other modules.
  if ($hook == 'node_access_records_alter') {
    $implementation = $implementations['views_node_access_filter'];
    unset($implementations['views_node_access_filter']);
    $implementations['views_node_access_filter'] = $implementation;
  }
}

/**
 * Implements hook_help().
 */
function views_node_access_filter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'help.page.views_node_access_filter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a Views filter to only show the nodes that the current user is allowed to edit. This is typically useful as an UX improvement for editors on the /admin/content page.') . '</p>';
      $output .= '<p>' . t('Note: because of the way core deals with node access (for performance reasons), this module may not take into account some node access modules which change the update access without updating the node access registry.') . '</p>';

      // Add a link to the Drupal.org project.
      $output .= '<p>';
      $output .= t('Visit the <a href=":project_link">Views Node Access Filter project pages</a> on Drupal.org for more information.', [
        ':project_link' => 'https://www.drupal.org/project/views_node_access_filter',
      ]);
      $output .= '</p>';

      return $output;

    default:
  }
}
