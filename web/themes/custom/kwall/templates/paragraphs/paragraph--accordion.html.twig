{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_id,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% set parent_id = 'accordion-' ~ paragraph.id.value %}

{% block paragraph %}
  <div id ="{{ parent_id }}" {{ attributes.addClass(classes) }}>
    <div class="container">
      <div class="row">
      {% block content %}

        {#
         * Section Title
        #}
        {% if content.field_title.0['#context'].value != '' %}
        <div class="col-md-12 accordion-section-title-wrap">
        {% endif %}

          {#
           * Toggle All Link
          #}
          {% if content.field_toggle_all.0['#markup'] == 'On' %}
          <div class="row">
            <div class="col-auto">
          {% endif %}

          {# Section Title #}
          {% if content.field_title.0['#context'].value != '' %}
            <div class="accordion-section-title">{{ content.field_title }}</div>
          {% endif %}

          {# Toggle All Link #}
          {% if content.field_toggle_all.0['#markup'] == 'On' %}
            </div>
            <div class="col-auto ml-auto">
              <div class="toggle-all-wrap">
                <div class="toggle-all collapsed">Toggle All</div>
              </div>
            </div>
          </div>
          {% endif %}{# END toggle all link #}

        {% if content.field_title.0['#context'].value != '' %}
        </div>
        {% endif %}{# END section title #}


        {#
         * Accordion Items
        #}
        {% for key, item in content.field_accordion_items if key|first != '#' %}
          {% set paragraph_id = 'accordion-' ~ item['#paragraph'].id.value %}

          <div class="col-md-12 card-wrap">
            <div class="card">
              <div class="card-header">      				
                <a data-toggle="collapse" href="#{{paragraph_id}}" aria-expanded="true" aria-controls="{{paragraph_id}}">{{ item['#paragraph'].field_title.value }}</a>
              </div>
            {% if key == '0' and content.field_boolean.0['#markup'] == 'On' %}
              <div id="{{paragraph_id}}" class="collapse open show" aria-labelledby="headingOne">
            {% else %}
              <div id="{{paragraph_id}}" class="collapse hide" aria-labelledby="headingOne">
            {% endif %}
                <div class="card-body">{{ item['#paragraph'].field_body_formatted.value|raw }}</div>
              </div>
            </div>
          </div>

        {% endfor %}{# END accordion items #}

      {% endblock %}
      </div>
    </div>
  </div>
{% endblock paragraph %}
