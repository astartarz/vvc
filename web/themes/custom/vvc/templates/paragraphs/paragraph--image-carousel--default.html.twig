{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_id,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="image-carousel">
        {% for key, item in content.group_container.field_image_carousel_items if key|first != '#' %}
          {% if key matches '/^\\d+$/' %}
            <div class="slide-item">
              <div class="slide-image">
                <img
                  src="{{ file_url(item['#paragraph'].field_image.entity.field_media_image.entity.fileuri|image_style('carousel_image')) }}"/>
              </div>
              <div class="slide-content">
                <div class="slide-desc">
                  {{ item['#paragraph'].field_description_txt.0.value|length > 180 ? item['#paragraph'].field_description_txt.0.value|slice(0, 180) ~ '...' : item['#paragraph'].field_description_txt.0.value }}
                </div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      <div class="slide-arrows">
        <div class="slide-prev"><a href="#" class="prev">
            <img src="{{ base_path ~ directory }}/assets/images/slide-arrow-left.svg"/></a></div>
        <div class="slide-next"><a href="#" class="next">
            <img src="{{ base_path ~ directory }}/assets/images/slide-arrow-right.svg"/></a></div>
      </div>
      <div class="image-nav">
        {% for key, item in content.group_container.field_image_carousel_items if key|first != '#' %}
          {% if key matches '/^\\d+$/' %}
            <div class="nav-img">
                <img src="{{ file_url(item['#paragraph'].field_image.entity.field_media_image.entity.fileuri|image_style('carousel_nav_97x54')) }}"/>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
